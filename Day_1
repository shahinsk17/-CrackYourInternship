************************************************DAY ONE***********************************************

Question.287: Find the Duplicate Number

Given an array of integers nums containing n + 1 integers where each integer is in the range [1, n] inclusive.
There is only one repeated number in nums, return this repeated number.
You must solve the problem without modifying the array nums and uses only constant extra space.

Solution:
class Solution {
public:
    int findDuplicate(vector<int>& nums) {
      
      vector<int>counter(nums.size()+1,0);

      for(int i=0;i<nums.size();i++)
      {
        counter[nums[i]]++;
        if(counter[nums[i]]>1)
        {
            return nums[i];
        }
      }
      return -1;
     
    }
};
***************************************************_______________________________________________***************************************************
Question.75: Sort Colors

Given an array nums with n objects colored red, white, or blue, sort them in-place so that objects of the same color are adjacent, with the colors in the order red, white, and blue.
We will use the integers 0, 1, and 2 to represent the color red, white, and blue, respectively.
You must solve this problem without using the library's sort function.

Solution: class Solution {
public:
    void sortColors(vector<int>& nums) {
     
       int low=0,mid=0,high=nums.size()-1;

        while(mid<=high)
        {
            if(nums[mid]==2)
            {
                swap(nums[mid],nums[high--]);
            }
            else if(nums[mid]==0)
            {
                swap(nums[mid],nums[low]);
                low++;
                mid++;
            }
            else{
                mid++;
            }
        }
}
