Question.442:Find All Duplicates in an Array
 
Given an integer array nums of length n where all the integers of nums are in the range [1, n] and each integer appears once or twice, return an array of all the integers that appears twice.
You must write an algorithm that runs in O(n) time and uses only constant extra space.

Solution:
 class Solution {
public:
    vector<int> findDuplicates(vector<int>& nums) {
//_______________________________Brute Force_________________
        // vector<int> isDup(nums.size() + 1, 0);

        // for (int i = 0; i < nums.size(); i++) {
        //     isDup[nums[i]]++;
        // }

        // vector<int> ans;
   
        // for (int i = 1; i < isDup.size(); i++) {
        //     if (isDup[i] > 1) {
        //         ans.push_back(i);
        //     }
        // }

        // return ans;
//____________________________Optimized_______________
        vector<int>ans;
        for(int i=0;i<nums.size();i++)
        {
            int indx=abs(nums[i])-1;

            if(nums[indx]<0)
            {
                ans.push_back(abs(nums[i]));
            }
            else
            {
                nums[indx]=-nums[indx];
          }
        }
        return ans;
    }
};

//________________________________________________________________________________________________________________________

Question.88: Merge Sorted Array
 
You are given two integer arrays nums1 and nums2, sorted in non-decreasing order, and two integers m and n, representing the number of elements in nums1 and nums2 respectively.
Merge nums1 and nums2 into a single array sorted in non-decreasing order.
The final sorted array should not be returned by the function, but instead be stored inside the array nums1. To accommodate this, nums1 has a length of m + n, where the first m elements denote the elements that should be merged, and the last n elements are set to 0 and should be ignored. nums2 has a length of n.

Solution:
class Solution {
public:
    void merge(vector<int>& nums1, int m, vector<int>& nums2, int n) {


        vector<int>ans(m+n,0);
        int k=0;
 
        int i=0,j=0;

        while(i<m && j<n)
        {
            if(nums1[i]<=nums2[j])
            {   ans[k++]=nums1[i++];

            }
            else{
                ans[k++]=nums2[j++];
            }
        }

        while(i<m)
        {
             ans[k++]=nums1[i++];
        }
        while(j<n)
        {
             ans[k++]=nums2[j++];
        }

        for(int i=0;i<(m+n);i++)
        {
            nums1[i]=ans[i];
        }
    
    }
};

//________________________________________________________________________________________________________________________

876. Middle of the Linked List
Given the head of a singly linked list, return the middle node of the linked list.
If there are two middle nodes, return the second middle node.

Solution:
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* middleNode(ListNode* head) {
    //    int count=0;
    //    ListNode*temp=head;
    //    while(temp!=NULL)
    //    {
    //     count++;
    //     temp=temp->next;
    //    }
    //    int x=count/2;
    //     temp=head; 
       
    //    while(x--)
    //    {
    //     temp=temp->next;
    //    }
    //    return temp;
      
    ListNode* slow=head;
    ListNode* fast=head;
     while(fast&&fast->next)
     {
        slow=slow->next;
        fast=fast->next->next;
     }

     return slow;
    }
};

//________________________________________________________________________________________________________
Question.141: Linked List Cycle
 
Given head, the head of a linked list, determine if the linked list has a cycle in it.
There is a cycle in a linked list if there is some node in the list that can be reached again by continuously following the next pointer. Internally, pos is used to denote the index of the node that tail's next pointer is connected to. Note that pos is not passed as a parameter.
Return true if there is a cycle in the linked list. Otherwise, return false.

Solution:
class Solution {
public:
    bool hasCycle(ListNode *head) {
      
      if(head==NULL || head->next==NULL){
        return false;
      }

      ListNode* slow=head;
      ListNode* fast=head->next;
      while(slow!=fast)
      {  if(fast==NULL || fast->next==NULL)
        {
            return false;
        }
        slow=slow->next;
        fast=fast->next->next;
        
      }
      return true;
      
      
     
    }
};






