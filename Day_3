Question.15:3 Sum

Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] such that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0.
Notice that the solution set must not contain duplicate triplets.

Solution:
  class Solution {
public:
    vector<vector<int>> threeSum(vector<int>& nums) {

         vector<vector<int>>ans;

         sort(nums.begin(),nums.end());
         int i,j,k;
         int sum=0;

         for(int i=0;i<nums.size();i++)
         {  if(i>0 && nums[i]==nums[i-1]){continue;}
            j=i+1;
            k=nums.size()-1;
            while(j<k)
            {
                int sum=nums[i]+nums[j]+nums[k];

                if(sum<0)
                {
                    j++;
                }
                else if(sum>0)
                {
                    k--;
                }
                else{
                    vector<int>temp={nums[i],nums[j],nums[k]};
                    ans.push_back(temp);
                    j++;
                    k--;

                    while(j<k && nums[j]==nums[j-1]){j++;}
                    while(j<k && nums[k]==nums[k+1]){k--;}
                }
            }
         }

       return ans;

    }
};



Question.18: 4Sum
Given an array nums of n integers, return an array of all the unique quadruplets [nums[a], nums[b], nums[c], nums[d]] such that: 0 <= a, b, c, d < n
a, b, c, and d are distinct.
nums[a] + nums[b] + nums[c] + nums[d] == target
You may return the answer in any order.


Solution:
class Solution {
public:
    vector<vector<int>> fourSum(vector<int>& nums, int target) 
    {
        vector<vector<int>>ans;

        sort(nums.begin(),nums.end());

       int i,j,k,l;
       long long sum=0;

        int n=nums.size();

        for(int i=0;i<n;i++)
        {
            if(i>0 && nums[i]==nums[i-1]){continue;}

            for(int j=i+1;j<n;j++)
            {
                if(j>i+1 && nums[j]==nums[j-1]){continue;}

                k=j+1;
                l=n-1;

                while(k<l)
                {
                    sum=static_cast<long long>(nums[i])+nums[j]+nums[k]+nums[l];
                    if(sum<target)
                    {
                        k++;
                    }
                    else if(sum>target)
                    {
                        l--;
                    }
                    else{
                        vector<int>temp= {nums[i],nums[j],nums[k],nums[l]};

                        ans.push_back(temp);

                        k++;
                        l--;

                        while(k<l && nums[k]==nums[k-1]){k++;}
                        while(k<l && nums[l]==nums[l+1]){l--;}
                    }
                }
                
            }
        }
       
       
       return ans;
       
       
    }
};




