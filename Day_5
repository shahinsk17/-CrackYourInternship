Question:Set Matrix Zeroes
----------------------------------------------------------------------

class Solution {
public:
    void setZeroes(vector<vector<int>>& matrix) {
       
        int m=matrix.size();
        int n=matrix[0].size();
 
        vector<int>zero_row(m,false);
        vector<int>zero_col(n,false);

        for(int i=0;i<m;i++)
        {
            for(int j=0;j<n;j++)
            {   if(matrix[i][j]==0)
                 {zero_row[i]=true;
                  zero_col[j]=true;}
            }
        }
 

        for(int i=0;i<m;i++)
        {
            for(int j=0;j<n;j++)
            {
                if(zero_row[i]||zero_col[j])
                {
                    matrix[i][j]=0;
                }
            }
        }
    }
};




Question: Container With Most Water
------------------------------------------------------------------
class Solution
{
public:
   int maxArea(vector<int> &ht)
   {
      int left = 0, right = ht.size() - 1;
      int area;

      while (left < right)
      {
         int calArea = (right - left) * min(ht[left], ht[right]);

         area = max(area, calArea);

         if (ht[left] < ht[right])
         {
            left++;
         }
         else
         {
            right--;
         }
      }
      return area;
   }
};



Question Convert Binary Number in a Linked List to Integer
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution
{
public:
    ListNode *rev(ListNode *curr, ListNode *prev)
    {
        if (curr == NULL)
        {
            return prev;
        }
        ListNode *fut = curr->next;
        curr->next = prev;

        return rev(fut, curr);
    }
    int getDecimalValue(ListNode *head)
    {
        head = rev(head, NULL);

        int sum = 0;
        ListNode *temp = head;
        int cnt = 0;

        while (temp)
        {
            temp = temp->next;
            cnt++;
        }

        temp = head;

        for (int i = 0; i < cnt; i++)
        {
            sum += temp->val * (pow(2, i));
            temp = temp->next;
        }

        return sum;
    }
};
