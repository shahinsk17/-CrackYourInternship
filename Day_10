Rearrange a Linked List in Zig-Zag fashion
------------------------------------------------------------
class Solution {
  public:
    Node* zigZag(Node* head) {
        // your code goes here
        
        Node* curr=head;
         // pehele ye rehna hi chahiye as per the condidtion (a<b_)
         bool isLess=true;
        while(curr->next){
           
            if(isLess)
            {
                if(curr->data>curr->next->data)
                {
                    swap(curr->data,curr->next->data);
                }
            }
            else{
                if(curr->data<curr->next->data)
                {
                    swap(curr->data,curr->next->data);
                }
            }
            isLess=!isLess; // it should be toggle the previous iteration
            curr=curr->next;
        }
        
        return head;
    }
};

Partition List
-----------------------------------------------------------------------------
 
class Solution {
public:
    ListNode* partition(ListNode* head, int x) {
        ListNode* temp1=new ListNode(0);
        ListNode* smallHead=temp1;


        ListNode* temp2=new ListNode(0);
        ListNode* largeHead=temp2;

        while(head)
        {
            if(head->val<x)
            {
                temp1->next=head;
                temp1=temp1->next;
                head=head->next;

            }
            else{
                 temp2->next=head;
                temp2=temp2->next;
                head=head->next;
            }
        }

        temp1->next=largeHead->next;
        temp2->next=NULL;
       
        return smallHead->next;


    }
};
