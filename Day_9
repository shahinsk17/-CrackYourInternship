Question 23. Merge k Sorted Lists
-----------------------------------------------------------
 
class Solution {
public:
ListNode* merge(ListNode* curr1,ListNode* curr2)
{   ListNode* dummy=new ListNode(0);
    ListNode* tail=dummy;
    while(curr1 && curr2)
    {
        if(curr1->val<=curr2->val)
        {
        tail->next=curr1;
           curr1=curr1->next;
        tail=tail->next;
      
        tail->next=NULL;
        }
        else{
         tail->next=curr2;
           curr2=curr2->next;
        tail=tail->next;
       
        tail->next=NULL;
        }


    }

    if(curr1)
    {
        tail->next=curr1;
    }
    if(curr2)
    {
        tail->next=curr2;
    }

    return dummy->next;
}
    ListNode* mergeKLists(vector<ListNode*>& lists) {
       
        if(lists.size()==0)
        {
            return NULL;
        }


        ListNode* head=lists[0];

        for(int i=1;i<lists.size();i++)
        {
            head=merge(head,lists[i]);
        }

        return head;
    }
};


Question Remove Duplicates from Sorted List II
--------------------------------------------------
 
class Solution {
public:
    ListNode* deleteDuplicates(ListNode* head) {
        ListNode* dummy=new ListNode(0);
        dummy->next=head;
      
        ListNode* prev=dummy;


        while(head!=NULL)
        {
            if(head->next!=NULL && head->val==head->next->val)
            {
                while(head->next!=NULL && head->val==head->next->val)
                {
                    head=head->next;
                }
                 prev->next=head->next;
            }
            else{
                prev=prev->next;
            }
            head=head->next;
        }

        return dummy->next;
    }
};
