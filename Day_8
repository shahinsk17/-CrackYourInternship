 Question :445. Add Two Numbers II
-----------------------------------------------------------
class Solution {
public:
ListNode* rev(ListNode* prev,ListNode* curr)
{   if(curr==NULL)
{
    return prev;
}
    ListNode* fut=curr->next;
     curr->next=prev;
    return rev(curr,fut);
}
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2)
    {  l1=rev(NULL,l1);
       l2=rev(NULL,l2);

       ListNode* head1=l1;
       ListNode* head2=l2;
    
       ListNode* dummy=new ListNode(0);
       ListNode* tail=dummy;
       int carry=0,sum=0;

       while(head1 && head2)
       {    sum=((head1->val+head2->val)+carry);
            tail->next=new ListNode(sum%10);
            tail=tail->next;
            head1=head1->next;
            head2=head2->next;
            carry=sum/10;
       }
       while(head1)
       {
         sum=(head1->val+carry);
          tail->next=new ListNode(sum%10);
          tail=tail->next;
          head1=head1->next;
          carry=sum/10;
       }

        while(head2)
       {
         sum=(head2->val+carry);
          tail->next=new ListNode(sum%10);
          tail=tail->next;
          head2=head2->next;
          carry=sum/10;
       }

       while(carry)
       {
        tail->next=new ListNode(carry%10);
        carry/=10;
       }

       dummy=rev(NULL,dummy->next);

       return dummy;

        
    }
};

Question Sort List
-------------------------------------------------------
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
ListNode* merge(ListNode* curr1,ListNode* curr2)
{
    ListNode* dummy=new ListNode(0);
    ListNode* tail=dummy;

    while(curr1&&curr2)
    {
        if(curr1->val<=curr2->val)
         {
            tail->next=curr1;
            tail=tail->next;
            curr1=curr1->next;
         }
         else{
            tail->next=curr2;
            tail=tail->next;
            curr2=curr2->next;
         }

         if(curr1)
         {
            tail->next=curr1;
         }
         if(curr2){
            tail->next=curr2;
         }
    }
    return dummy->next;
}
ListNode*  findMid(ListNode* head)
{
    ListNode* slow=head;
    ListNode* fast=head->next;

    while(fast&& fast->next)
    {
        slow=slow->next;
        fast=fast->next->next;
    }
    return slow;
}
    ListNode* sortList(ListNode* head) {
        if(head==NULL || head->next==NULL)
        {
            return head;
        }
        
        ListNode* mid=findMid(head);
        ListNode* left=head;
        ListNode* right=mid->next;
        mid->next=NULL;

        left=sortList(left);
        right=sortList(right);


        ListNode* res= merge(left,right);
        return res;
    }
};

Question Reorder List
-------------------------------------------------------------
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* rev(ListNode* prev, ListNode* curr) {
        if (curr == NULL) {
            return prev;
        }
        ListNode* fut = curr->next;
        curr->next = prev;
        return rev(curr, fut);
    }

 void reorderList(ListNode* head) {
      // finding mid 
       ListNode* temp = head;
        int cnt = 0;

        while (temp) {
            cnt++;
            temp = temp->next;
        }

        cnt /= 2;
        temp = head;

        while (cnt--) {
            temp = temp->next;
        }

        // reversing the remaining part

        ListNode* head2=rev(NULL,temp->next);
        temp->next = NULL;

        // merging 
    ListNode* head1 = head;
    while(head1&&head2)
    {
        ListNode* temp1=head1->next;
        ListNode* temp2=head2->next;

        head1->next=head2;
        head2->next=temp1;

        head1=temp1;
        head2=temp2; 
    }   
       
 
    }
};



Question 19. Remove Nth Node From End of List
----------------------------------------------------------------
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* removeNthFromEnd(ListNode* head, int n) {

    ListNode* temp=head;
    int cnt=0;
    while(temp)
    {
        cnt++;
        temp=temp->next;
    }

    int steps=abs(cnt-n);

    if(steps==0)
    {
        temp=head;
        head=head->next;
        delete temp;
        return head;
    }

ListNode* prev=NULL;
ListNode* curr=head;
while(steps--)
 {
    prev=curr;
    curr=curr->next;
 }
prev->next=curr->next;
delete curr;
return head;


    }
};
